Quick Tips:
*Start server: Inside the backend directory, run "nodemon server"
*JSON Chrome Extension - JSON Formatter
*Test out api calls on Postman, if doing calls to localhost, install Postman Desktop Agent, otherwise it won't work.

Backend -
1. create a folder called backend

2. cd backend

3. npm init -y (this is so you create a package.json file inside backend directory)

4. now install a few dependencies, npm install express cors mongodb dotenv
    express - What we use for the web server
    cors - cross origin resource sharing, this will help make the right connections without errors
    mongodb - so you can interact with the database
    dotenv - loads environmental variables from a .env file

5. npm install -g nodemon
    nodemon - helps restart the node application without restarting the server whenever files are changed

6. Go into the package.json file and add "type": "module" (this will allow us to use the import statements from es6)

7. create a file server.js

8. create a .env file, need to find the URI, which can be found in the mongodb, connect, connect your application, copy the URI.
examples:
RESTREVIEWS_DB_URI=mongodb+srv://salbih1991:<password>@cluster0.k1jzgc3.mongodb.net/?retryWrites=true&w=majority (Update the password and include the collection before the ? and after /)

RESTREVIEWS_DB_URI=mongodb+srv://salbih1991:mypassword@cluster0.k1jzgc3.mongodb.net/sample_restaurants?retryWrites=true&w=majority
RESTREVIEWS_NS=sample_restaurants
PORT=5000
to access env you do "process.env.<whatever is in the env file)"
9. create a file index.js (this file will connect to the database and start the server)

10. create a new folder called api

11. inside the api folder, create restaurants.route.js

12. now test the backend server, go to the backend directory in your terminal, type "nodemon server"
-If you get an error saying nodemon is not recognized, do the following command: npm install -g nodemon
-Make sure you're using your current IP address, can be found in Network access
-If you get authentication issues, double check password in databse access.
(use a demonstration route -> router.route("/").get((req, res) => res.send("hello world")); //demonstration route)
In the browser check: http://localhost:5000/api/v1/restaurants

13. In your web browser, go to http://localhost:5000/api/v1/restaurants -> the 5000 is the port in your .env file

14. In the api folder, create a dao (data access object) folder

15. In the dao folder, create a file restaurantsDAO.js

16. Import restaurantsDAO.js inside index.js and insert await RestaurantsDAO.injectDB(client); when we first connect and before we start the server.

17. Import RestaurantsCtrl from "./restaurants.controller.js" inside the restaurants.route.js
    in the home route, add .get(RestaurantsCtrl.apiGetRestaurants)

18. Now inside api folder create the restaurants.controller.js file.

19. Go to MongoDB atlas, browse collection, select the collection (restaurants), then click the tab indexes.
Indexes is a field you will set up to be able to search on. For this example, we will add the field name and the type text. "name": "text",

20. Create reviews.controller.js inside api folder

21. Create reviewsDAO.js inside dao folder

22. Make sure to injectDB inside index.js

23. When testing in Postman, make sure your request is JSON (Look at the drop down)


Go to your google keeps, go to the video, left off at 1:01:52. You just created getRestaurantByID function in restaurantsDAO.js

